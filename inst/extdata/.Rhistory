e2 <- exprs(helaEgf)
## Experiment info
toName <- paste0(colnames(e1)[1:15])
colnames(e1) <- toName
pd <- data.frame(toName,
row.names=colnames(e1))
pd <- new("AnnotatedDataFrame", pd)
toName <- paste0(colnames(e2)[1:15])
colnames(e2) <- toName
pd2 <- data.frame(toName,
row.names=colnames(e2))
pd2 <- new("AnnotatedDataFrame", pd2)
## feature data
fd <- rownames(e1)
fd <- as.data.frame(fd)
fd$markers <- "unknown"
fd$markers <- as.character(csv1$Organellar.markers)
fd$markers[fd$markers == ""] <- "unknown"
rownames(fd) <- rownames(e1)
fd <- new("AnnotatedDataFrame", fd)
fd2 <- rownames(e2)
fd2 <- as.data.frame(fd2)
fd2$markers <- "unknown"
fd2$markers <- as.character(csv2$Organellar.markers)
fd2$markers[fd2$markers == ""] <- "unknown"
rownames(fd2) <- rownames(e2)
fd2 <- new("AnnotatedDataFrame", fd2)
process <- new("MSnProcess",
processing=c(
paste("Loaded on ",date(),".",sep=""),
paste("median Normalisation")),
normalised=FALSE)
helaCtrl <- new("MSnSet",
exprs = e1,
phenoData = pd,
experimentData = experiment,
featureData = fd)
helaEgf <- new("MSnSet",
exprs = e2,
phenoData = pd2,
experimentData = experiment,
featureData = fd2)
## Normalise
e1 <- 1/e1
e1 <- e1 * c(0.27, 0.28, 0.11, 0.10, 0.24)
plot2D(helaCtrl)
csvfile1 <- "../../inst/extdata/silacDynamicItzhakCtrl.csv"
csvfile2 <- "../../inst/extdata/silacDynamicItzhakEGF.csv"
csv1 <- read.csv(csvfile1)
csv2 <- read.csv(csvfile2)
#getEcols(csvfile, split = ",", n = 3)
## There are 3 replicates in each dataset
helaCtrl <- readMSnSet2(file = csvfile1, ecol = 7:21, skip = 0, fnames = 2)
helaEgf <- readMSnSet2(file = csvfile2, ecol = 7:21, skip = 0, fnames = 2)
## Experimental data to add
experiment <- new("MIAPE",
lab = "Max Planck Institute of Biochemistry, Germany",
name = "Daniel Itzhak",
contact = "Georg Borner",
email = "borner@biochem.mpg.de",
samples = list(
species = "Human HeLa Cells",
operator = "Daniel Itzhak"
),
title = "Global, quantitative and dynamic mapping of protein subcellular localization",
abstract = "Subcellular localization critically influences protein function, and cells
control protein localization to regulate biological processes. We have developed and
applied Dynamic Organellar Maps, a proteomic method that allows global mapping of protein
translocation events. We initially used maps statically to generate a database with
localization and absolute copy number information for over 8700 proteins from HeLa cells,
approaching comprehensive coverage. All major organelles were resolved, with exceptional
prediction accuracy (estimated at >92%). Combining spatial and abundance information yielded
an unprecedented quantitative view of HeLa cell anatomy and organellar composition,
at the protein level. We subsequently demonstrated the dynamic capabilities of the
approach by capturing translocation events following EGF stimulation, which we
integrated into a quantitative model. Dynamic Organellar Maps enable the proteome-wide
analysis of physiological protein movements, without requiring any reagents specific
to the investigated process, and will thus be widely applicable in cell biology.",
pubMedIds = "",
url = "",
instrumentModel = "Q Exactive HF-X",
instrumentManufacturer = "ThermoScientific",
ionSource = "",
analyser = "Orbitrap",
detectorType = "Orbitrap",
softwareName = "MaxQuant ",
collisionEnergy = "",
dateStamp = "3 January 2018"
)
## Expression data
e1 <- exprs(helaCtrl)
e2 <- exprs(helaEgf)
## Experiment info
toName <- paste0(colnames(e1)[1:15])
colnames(e1) <- toName
pd <- data.frame(toName,
row.names=colnames(e1))
pd <- new("AnnotatedDataFrame", pd)
toName <- paste0(colnames(e2)[1:15])
colnames(e2) <- toName
pd2 <- data.frame(toName,
row.names=colnames(e2))
pd2 <- new("AnnotatedDataFrame", pd2)
## feature data
fd <- rownames(e1)
fd <- as.data.frame(fd)
fd$markers <- "unknown"
fd$markers <- as.character(csv1$Organellar.markers)
fd$markers[fd$markers == ""] <- "unknown"
rownames(fd) <- rownames(e1)
fd <- new("AnnotatedDataFrame", fd)
fd2 <- rownames(e2)
fd2 <- as.data.frame(fd2)
fd2$markers <- "unknown"
fd2$markers <- as.character(csv2$Organellar.markers)
fd2$markers[fd2$markers == ""] <- "unknown"
rownames(fd2) <- rownames(e2)
fd2 <- new("AnnotatedDataFrame", fd2)
process <- new("MSnProcess",
processing=c(
paste("Loaded on ",date(),".",sep=""),
paste("median Normalisation")),
normalised=FALSE)
helaCtrl <- new("MSnSet",
exprs = e1,
phenoData = pd,
experimentData = experiment,
featureData = fd)
helaEgf <- new("MSnSet",
exprs = e2,
phenoData = pd2,
experimentData = experiment,
featureData = fd2)
plot2D(helaCtrl)
e1 <- 1/e1
e1 <- e1 * c(0.27, 0.28, 0.11, 0.10, 0.24)
exprs(helaCtrl) <- e1
plot2D(helaCtrl)
csvfile1 <- "../../inst/extdata/silacDynamicItzhakCtrl.csv"
csvfile2 <- "../../inst/extdata/silacDynamicItzhakEGF.csv"
csv1 <- read.csv(csvfile1)
csv2 <- read.csv(csvfile2)
#getEcols(csvfile, split = ",", n = 3)
## There are 3 replicates in each dataset
helaCtrl <- readMSnSet2(file = csvfile1, ecol = 7:21, skip = 0, fnames = 2)
helaEgf <- readMSnSet2(file = csvfile2, ecol = 7:21, skip = 0, fnames = 2)
## Experimental data to add
experiment <- new("MIAPE",
lab = "Max Planck Institute of Biochemistry, Germany",
name = "Daniel Itzhak",
contact = "Georg Borner",
email = "borner@biochem.mpg.de",
samples = list(
species = "Human HeLa Cells",
operator = "Daniel Itzhak"
),
title = "Global, quantitative and dynamic mapping of protein subcellular localization",
abstract = "Subcellular localization critically influences protein function, and cells
control protein localization to regulate biological processes. We have developed and
applied Dynamic Organellar Maps, a proteomic method that allows global mapping of protein
translocation events. We initially used maps statically to generate a database with
localization and absolute copy number information for over 8700 proteins from HeLa cells,
approaching comprehensive coverage. All major organelles were resolved, with exceptional
prediction accuracy (estimated at >92%). Combining spatial and abundance information yielded
an unprecedented quantitative view of HeLa cell anatomy and organellar composition,
at the protein level. We subsequently demonstrated the dynamic capabilities of the
approach by capturing translocation events following EGF stimulation, which we
integrated into a quantitative model. Dynamic Organellar Maps enable the proteome-wide
analysis of physiological protein movements, without requiring any reagents specific
to the investigated process, and will thus be widely applicable in cell biology.",
pubMedIds = "",
url = "",
instrumentModel = "Q Exactive HF-X",
instrumentManufacturer = "ThermoScientific",
ionSource = "",
analyser = "Orbitrap",
detectorType = "Orbitrap",
softwareName = "MaxQuant ",
collisionEnergy = "",
dateStamp = "3 January 2018"
)
## Expression data
e1 <- exprs(helaCtrl)
e2 <- exprs(helaEgf)
## Experiment info
toName <- paste0(colnames(e1)[1:15])
colnames(e1) <- toName
pd <- data.frame(toName,
row.names=colnames(e1))
pd <- new("AnnotatedDataFrame", pd)
toName <- paste0(colnames(e2)[1:15])
colnames(e2) <- toName
pd2 <- data.frame(toName,
row.names=colnames(e2))
pd2 <- new("AnnotatedDataFrame", pd2)
## feature data
fd <- rownames(e1)
fd <- as.data.frame(fd)
fd$markers <- "unknown"
fd$markers <- as.character(csv1$Organellar.markers)
fd$markers[fd$markers == ""] <- "unknown"
rownames(fd) <- rownames(e1)
fd <- new("AnnotatedDataFrame", fd)
fd2 <- rownames(e2)
fd2 <- as.data.frame(fd2)
fd2$markers <- "unknown"
fd2$markers <- as.character(csv2$Organellar.markers)
fd2$markers[fd2$markers == ""] <- "unknown"
rownames(fd2) <- rownames(e2)
fd2 <- new("AnnotatedDataFrame", fd2)
process <- new("MSnProcess",
processing=c(
paste("Loaded on ",date(),".",sep=""),
paste("median Normalisation")),
normalised=FALSE)
helaCtrl <- new("MSnSet",
exprs = e1,
phenoData = pd,
experimentData = experiment,
featureData = fd)
helaEgf <- new("MSnSet",
exprs = e2,
phenoData = pd2,
experimentData = experiment,
featureData = fd2)
## Normalise
e1 <- 1/e1
exprs(helaCtrl) <- e1
plot2D(helaCtrl)
csvfile1 <- "../../inst/extdata/silacDynamicItzhakCtrl.csv"
csvfile2 <- "../../inst/extdata/silacDynamicItzhakEGF.csv"
csv1 <- read.csv(csvfile1)
csv2 <- read.csv(csvfile2)
#getEcols(csvfile, split = ",", n = 3)
## There are 3 replicates in each dataset
helaCtrl <- readMSnSet2(file = csvfile1, ecol = 7:21, skip = 0, fnames = 2)
helaEgf <- readMSnSet2(file = csvfile2, ecol = 7:21, skip = 0, fnames = 2)
## Experimental data to add
experiment <- new("MIAPE",
lab = "Max Planck Institute of Biochemistry, Germany",
name = "Daniel Itzhak",
contact = "Georg Borner",
email = "borner@biochem.mpg.de",
samples = list(
species = "Human HeLa Cells",
operator = "Daniel Itzhak"
),
title = "Global, quantitative and dynamic mapping of protein subcellular localization",
abstract = "Subcellular localization critically influences protein function, and cells
control protein localization to regulate biological processes. We have developed and
applied Dynamic Organellar Maps, a proteomic method that allows global mapping of protein
translocation events. We initially used maps statically to generate a database with
localization and absolute copy number information for over 8700 proteins from HeLa cells,
approaching comprehensive coverage. All major organelles were resolved, with exceptional
prediction accuracy (estimated at >92%). Combining spatial and abundance information yielded
an unprecedented quantitative view of HeLa cell anatomy and organellar composition,
at the protein level. We subsequently demonstrated the dynamic capabilities of the
approach by capturing translocation events following EGF stimulation, which we
integrated into a quantitative model. Dynamic Organellar Maps enable the proteome-wide
analysis of physiological protein movements, without requiring any reagents specific
to the investigated process, and will thus be widely applicable in cell biology.",
pubMedIds = "",
url = "",
instrumentModel = "Q Exactive HF-X",
instrumentManufacturer = "ThermoScientific",
ionSource = "",
analyser = "Orbitrap",
detectorType = "Orbitrap",
softwareName = "MaxQuant ",
collisionEnergy = "",
dateStamp = "3 January 2018"
)
## Expression data
e1 <- exprs(helaCtrl)
e2 <- exprs(helaEgf)
## Experiment info
toName <- paste0(colnames(e1)[1:15])
colnames(e1) <- toName
pd <- data.frame(toName,
row.names=colnames(e1))
pd <- new("AnnotatedDataFrame", pd)
toName <- paste0(colnames(e2)[1:15])
colnames(e2) <- toName
pd2 <- data.frame(toName,
row.names=colnames(e2))
pd2 <- new("AnnotatedDataFrame", pd2)
## feature data
fd <- rownames(e1)
fd <- as.data.frame(fd)
fd$markers <- "unknown"
fd$markers <- as.character(csv1$Organellar.markers)
fd$markers[fd$markers == ""] <- "unknown"
rownames(fd) <- rownames(e1)
fd <- new("AnnotatedDataFrame", fd)
fd2 <- rownames(e2)
fd2 <- as.data.frame(fd2)
fd2$markers <- "unknown"
fd2$markers <- as.character(csv2$Organellar.markers)
fd2$markers[fd2$markers == ""] <- "unknown"
rownames(fd2) <- rownames(e2)
fd2 <- new("AnnotatedDataFrame", fd2)
process <- new("MSnProcess",
processing=c(
paste("Loaded on ",date(),".",sep=""),
paste("median Normalisation")),
normalised=FALSE)
helaCtrl <- new("MSnSet",
exprs = e1,
phenoData = pd,
experimentData = experiment,
featureData = fd)
helaEgf <- new("MSnSet",
exprs = e2,
phenoData = pd2,
experimentData = experiment,
featureData = fd2)
## Normalise
#e1 <- 1/e1
e1 <- e1 * c(0.27, 0.28, 0.11, 0.10, 0.24)
exprs(helaCtrl) <- e1
plot2D(helaCtrl)
plot2D(helaCtrl, mirrorX = TRUE)
csvfile1 <- "../../inst/extdata/silacDynamicItzhakCtrl.csv"
csvfile2 <- "../../inst/extdata/silacDynamicItzhakEGF.csv"
csv1 <- read.csv(csvfile1)
csv2 <- read.csv(csvfile2)
#getEcols(csvfile, split = ",", n = 3)
## There are 3 replicates in each dataset
helaCtrl <- readMSnSet2(file = csvfile1, ecol = 7:21, skip = 0, fnames = 2)
helaEgf <- readMSnSet2(file = csvfile2, ecol = 7:21, skip = 0, fnames = 2)
## Experimental data to add
experiment <- new("MIAPE",
lab = "Max Planck Institute of Biochemistry, Germany",
name = "Daniel Itzhak",
contact = "Georg Borner",
email = "borner@biochem.mpg.de",
samples = list(
species = "Human HeLa Cells",
operator = "Daniel Itzhak"
),
title = "Global, quantitative and dynamic mapping of protein subcellular localization",
abstract = "Subcellular localization critically influences protein function, and cells
control protein localization to regulate biological processes. We have developed and
applied Dynamic Organellar Maps, a proteomic method that allows global mapping of protein
translocation events. We initially used maps statically to generate a database with
localization and absolute copy number information for over 8700 proteins from HeLa cells,
approaching comprehensive coverage. All major organelles were resolved, with exceptional
prediction accuracy (estimated at >92%). Combining spatial and abundance information yielded
an unprecedented quantitative view of HeLa cell anatomy and organellar composition,
at the protein level. We subsequently demonstrated the dynamic capabilities of the
approach by capturing translocation events following EGF stimulation, which we
integrated into a quantitative model. Dynamic Organellar Maps enable the proteome-wide
analysis of physiological protein movements, without requiring any reagents specific
to the investigated process, and will thus be widely applicable in cell biology.",
pubMedIds = "",
url = "",
instrumentModel = "Q Exactive HF-X",
instrumentManufacturer = "ThermoScientific",
ionSource = "",
analyser = "Orbitrap",
detectorType = "Orbitrap",
softwareName = "MaxQuant ",
collisionEnergy = "",
dateStamp = "3 January 2018"
)
## Expression data
e1 <- exprs(helaCtrl)
e2 <- exprs(helaEgf)
## Experiment info
toName <- paste0(colnames(e1)[1:15])
colnames(e1) <- toName
pd <- data.frame(toName,
row.names=colnames(e1))
pd <- new("AnnotatedDataFrame", pd)
toName <- paste0(colnames(e2)[1:15])
colnames(e2) <- toName
pd2 <- data.frame(toName,
row.names=colnames(e2))
pd2 <- new("AnnotatedDataFrame", pd2)
## feature data
fd <- rownames(e1)
fd <- as.data.frame(fd)
fd$markers <- "unknown"
fd$markers <- as.character(csv1$Organellar.markers)
fd$markers[fd$markers == ""] <- "unknown"
rownames(fd) <- rownames(e1)
fd <- new("AnnotatedDataFrame", fd)
fd2 <- rownames(e2)
fd2 <- as.data.frame(fd2)
fd2$markers <- "unknown"
fd2$markers <- as.character(csv2$Organellar.markers)
fd2$markers[fd2$markers == ""] <- "unknown"
rownames(fd2) <- rownames(e2)
fd2 <- new("AnnotatedDataFrame", fd2)
process <- new("MSnProcess",
processing=c(
paste("Loaded on ",date(),".",sep=""),
paste("median Normalisation")),
normalised=FALSE)
helaCtrl <- new("MSnSet",
exprs = e1,
phenoData = pd,
experimentData = experiment,
featureData = fd)
helaEgf <- new("MSnSet",
exprs = e2,
phenoData = pd2,
experimentData = experiment,
featureData = fd2)
## Normalise
exprs(helaCtrl) <- e1
plot2D(helaCtrl, mirrorX = TRUE)
plot2D(helaCtrl, mirrorX = TRUE, mirrorY = TRUE)
plot2D(helaCtrl, mirrorY = TRUE)
plot2D(helaCtrl)
plot2D(helaCtrl[,1:5])
plot2D(helaCtrl[,6:10])
plot2D(helaCtrl[,11:15])
plot2D(helaCtrl)
plot2D(helaCtrl[,1:5])
plot2D(helaCtrl[,6:10])
plot2D(helaCtrl[,6:10], dim = c(1,3))
plot2D(helaCtrl, dim = c(1,3))
plot2D(helaCtrl[,1:5], dim = c(1,3))
plot2D(helaCtrl[,6:10], dim = c(1,3))
plot2D(helaCtrl[,11:15], dim = c(1,3))
sampleNames(helaCtrl)
strsplit(sampleNames(helaCtrl), "[.]")
matrix(unlist(strsplit(sampleNames(helaCtrl), "[.]")), 10, 3, byrow = T)[,1]
matrix(unlist(strsplit(sampleNames(helaCtrl), "[.]")), 15, 3, byrow = T)[,1]
matrix(unlist(strsplit(sampleNames(helaCtrl), "[.]")), 15, 5, byrow = T)[,1]
matrix(unlist(strsplit(sampleNames(helaCtrl), "[.]")), 15, 1, byrow = T)[,1]
matrix(unlist(strsplit(sampleNames(helaCtrl), "[.]")), 15, 3, byrow = T)[,1]
matrix(unlist(strsplit(sampleNames(helaCtrl), "[.]")), 15, 5, byrow = T)[,1]
matrix(unlist(strsplit(sampleNames(helaCtrl), "[.]")), 15, 5, byrow = T)[,5]
matrix(unlist(strsplit(sampleNames(helaCtrl), "[.]")), 10, 3, byrow = T)[,5]
matrix(unlist(strsplit(sampleNames(helaCtrl), "[.]")), 15, 5, byrow = T)[,5]
matrix(unlist(strsplit(sampleNames(helaCtrl), "[_]")), 15, 5, byrow = T)[,2]
matrix(unlist(strsplit(sampleNames(helaCtrl), "[_]")), 15, 2, byrow = T)[,2]
matrix(unlist(strsplit(sampleNames(helaCtrl), "[_]")), 15, 2, byrow = T)[,1]
matrix(unlist(strsplit(sampleNames(helaCtrl), "[_]")), 15, 5, byrow = T)[,2]
rep(1,2,3,5)
rep(c(1,2,3),5)
?rep
rep(c(1,2,3), each = 5)
pData(helaEgf)$fraction <- matrix(unlist(strsplit(sampleNames(helaEgf), "[.]")), 15, 5, byrow = T)[,5]
pData(helaEgf)$fraction
pData(helaEgf)$replicate <- rep(c(1,2,3), each = 5)
stopifnot(length(pData(helaCtrl)$replicate) == ncol(e)) # check columns and experiments match
stopifnot(length(pData(helaCtrl)$replicate) == ncol(e1)) # check columns and experiments match
length(pData(helaCtrl)$replicate)
pData(helaCtrl)$replicate
pData(helaCtrl)$replicate <- rep(c(1,2,3), each = 5)
stopifnot(length(pData(helaCtrl)$replicate) == ncol(e1)) # check columns and experiments match
stopifnot(length(pData(helaEgf)$replicate) == ncol(e2)) # check columns and experiments match
helaCtrl@processingData <- process
helaEgf@processingData <- process
helaCtrl@processingData <- process
helaEgf@processingData <- process
stopifnot(validObject(helaCtrl))
stopifnot(validObject(helaEgf))
save(helaCtrl, file="../../data/itzhak2016helaCtrl.rda", compress = "xz", compression_level = 9)
stopifnot(validObject(helaCtrl))
stopifnot(validObject(helaEgf))
save(helaCtrl, file="../../data/itzhak2016helaCtrl.rda", compress = "xz", compression_level = 9)
save(helaEgf, file="../../data/itzhak2016helaEgf.rda", compress = "xz", compression_level = 9)
source('~/.active-rstudio-document')
plot2D(helaEgf)
plot2D(helaEgf, dims = c(1,3))
load("C:/Users/OllyC/Desktop/pRolocdata/data/itzhak2016helaCtrl.rda")
helaCtrl
devtools::document()
data(itzhak2017)
require(pRolocdata)
data(itzhak2017)
devtools::build()
devtools::check()
devtools::check()
require(pRolocdata)
devtools::install()
pRolocdata()
data(helaCtrl)
data(helaCtrl (itzhak2016helaCtrl))
data(itzhak2016helaCtrl)
data(itzhak2016helaCtrl)
data(itzhak2016helaEgf)
data(itzhak2016helaEgf)
plot2D(helaEgf, dims = c(1,3))
detach(name = "pRolocdata")
detach(pkg = "pRolocdata")
library("pRolocdata", lib.loc="~/R/win-library/3.5")
detach(pkg = "pRolocdata")
detach(pkg = "package:pRolocdata")
detach("package:pRolocdata")
devtools::install_github(repo = "ococrook/pRolocdata")
require(pRolocdata)
data(itzhak2016helaCtrl)
data("itzhak2016helaCtrl")
data("ithzak2016helaCtrl")
helaCtrl
pData(helaCtrl)
exprs(helaCtrl)[1:3,1:3]
library("pRoloc")
plot2D(helaCtrl, main = "HeLa Ctrl", dims = c(1, 3))
data("itzhak2016helaCtrl")
helaCtrl
pData(helaCtrl)
exprs(helaCtrl)[1:3,1:3]
library("pRoloc")
plot2D(helaCtrl, main = "HeLa Ctrl", dims = c(1, 3))
source('C:/Users/OllyC/Desktop/pRolocdata/inst/scripts/itzhak2016dynamic.R')
?lm
